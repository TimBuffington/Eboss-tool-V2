import streamlit as st
apply_global_theme(); 

ensure_state(); render_logo()
st.header("Parallel Calculator")

st.info("Parallel sizing/logic UI goes here.")

import streamlit as st
from datetime import date
from theme import apply_global_theme
from nav import render_global_header
from utils.keys import CANON

# Placeholder data (replace with actual imports from your data module)
EBOSS_KVA = {
    "EB25 kVA": 25,
    "EB70 kVA": 70,
    "EB125 kVA": 125,
    "EB220 kVA": 220,
    "EB400 kVA": 400,
}
Eboss_Charge_Rates = {
    25: {"power_module": 10.0, "max": 15.0},
    70: {"power_module": 20.0, "max": 30.0},
    125: {"power_module": 40.0, "max": 60.0},
    220: {"power_module": 60.0, "max": 90.0},
    400: {"power_module": 100.0, "max": 150.0},
}
STANDARD_GENERATORS = {
    "GEN25/20kW": 1.5,
    "GEN70/56kW": 3.0,
    "GEN125/100kW": 5.0,
    "GEN220/176kW": 8.0,
    "GEN400/320kW": 12.0,
}

def render_parallel_calculator_page():
    # Apply global theme and logo
    apply_global_theme()
    render_global_header()

    st.markdown('<div class="form-container">', unsafe_allow_html=True)
    st.markdown("## Parallel/Hybrid Sizing Tool")

    # --- Load requirements
    st.markdown("### Required Project Load")
    required_cont_kw = st.number_input(
        "Required Continuous Load (kW)",
        min_value=0,
        max_value=2000,
        step=1,
        key=CANON["max_cont"],
    )
    required_peak_kw = st.number_input(
        "Required Max Peak Load (kW)",
        min_value=0,
        max_value=2500,
        step=1,
        key=CANON["max_peak"],
    )

    # --- Sizing preference
    st.markdown("### Sizing Criterion")
    sizing_pref = st.radio(
        "Do you want to size for **optimal fuel efficiency** (max continuous = 2/3 battery kWh) or **minimum number of items** (max allowed per your chart)?",
        ["Optimal fuel efficiency", "Minimum item count"],
        horizontal=True,
        key="sizing_preference",
    )

    # --- Show user inventory
    st.markdown("### EBOSS Units in Inventory")
    eboss_inventory = {}
    eboss_charge_overrides = {}
    for model in EBOSS_KVA.keys():
        col1, col2 = st.columns([2, 1])
        with col1:
            qty = st.number_input(
                f"{model} (quantity)",
                min_value=0,
                max_value=20,
                step=1,
                key=f"{CANON['model']}_{model}",
            )
        with col2:
            eboss_kva = EBOSS_KVA[model]
            set_rate = Eboss_Charge_Rates[eboss_kva]["power_module"]
            max_rate = Eboss_Charge_Rates[eboss_kva]["max"]
            charge_rate = st.number_input(
                f"Set charge rate for {model} (default {set_rate} kW)",
                min_value=1.0,
                max_value=max_rate,
                value=float(set_rate),
                step=0.5,
                key=f"charge_{model}",
            )
            if charge_rate > max_rate:
                st.error(f"Charge rate for {model} cannot exceed max allowed ({max_rate} kW).")
                st.stop()
            eboss_charge_overrides[model] = charge_rate
        eboss_inventory[model] = qty

    st.markdown("### Generators in Inventory")
    gen_inventory = {}
    for gen in STANDARD_GENERATORS.keys():
        qty = st.number_input(
            f"{gen} (quantity)",
            min_value=0,
            max_value=10,
            step=1,
            key=f"gen_{gen}",
        )
        gen_inventory[gen] = qty

    st.markdown("### What do you want to calculate?")
    need_option = st.radio(
        "Show me:",
        ["Total number of items required", "Additional items needed (based on inventory)"],
        horizontal=True,
        key="need_option",
    )

    # --- Calculate needed EBoss units
    if st.button("ðŸ”¢ Calculate Paralleled System", key="calculate_system"):
        # Determine per-unit kW based on sizing_pref
        unit_capacity = {}
        for model in EBOSS_KVA.keys():
            if sizing_pref == "Optimal fuel efficiency":
                battery_kwh = {
                    "EB25 kVA": 15,
                    "EB70 kVA": 25,
                    "EB125 kVA": 50,
                    "EB220 kVA": 75,
                    "EB400 kVA": 125,
                }[model]
                ideal_kw = (2/3) * battery_kwh
            else:
                ideal_kw = eboss_charge_overrides[model]
            unit_capacity[model] = ideal_kw

        # Step 1: Apply user's inventory
        total_supported_kw = 0
        used_inventory = {}
        for model, qty in eboss_inventory.items():
            if qty > 0:
                model_kw = unit_capacity[model]
                model_total_kw = qty * model_kw
                total_supported_kw += model_total_kw
                used_inventory[model] = qty

        # Step 2: Determine how many more units are needed
        additional_units = {}
        deficit = max(0, required_cont_kw - total_supported_kw)
        if deficit > 0:
            for model, model_kw in sorted(unit_capacity.items(), key=lambda x: -x[1]):
                need_qty = int(deficit // model_kw)
                if deficit % model_kw != 0:
                    need_qty += 1
                if need_qty > 0:
                    additional_units[model] = need_qty
                    deficit -= need_qty * model_kw
                    if deficit <= 0:
                        break

        # Results for EBoss units
        st.markdown("### ðŸ“Š Results: EBOSS Units")
        if need_option == "Total number of items required":
            for model in unit_capacity:
                total = used_inventory.get(model, 0) + additional_units.get(model, 0)
                if total > 0:
                    st.write(f"{model}: {total} (each set to {unit_capacity[model]:.1f} kW)")
        else:
            for model, qty in additional_units.items():
                if qty > 0:
                    st.write(f"Still need: {qty} x {model} (set to {unit_capacity[model]:.1f} kW)")

        # Calculate recommended generator sizing for EBOSS units
        st.markdown("### ðŸ”Œ Generator Sizing for EBOSS System")
        pf = 0.8
        total_eboss_kw = sum((used_inventory.get(model, 0) + additional_units.get(model, 0)) * unit_capacity[model] for model in EBOSS_KVA.keys())
        min_gen_kva = total_eboss_kw / pf
        st.write(f"Recommended generator size for charging: **{total_eboss_kw:.1f} kW** ({min_gen_kva:.1f} kVA, PF=0.8)")

        # --- Standard Generator Comparison Button
        if st.button("Compare to Standard Generator System", key="compare_generators"):
            st.markdown("## Standard Generator Comparison")

            # Calculate total kW output from all EBoss units
            st.markdown(f"**Total EBoss kW Output:** {total_eboss_kw:.1f} kW")

            # 1. Show generator count per size for EBoss system charging
            st.markdown("#### Generator Count for EBOSS Charging:")
            required_gen_kw = total_eboss_kw
            generator_rows = []
            remaining_gen_kw = required_gen_kw
            for gen, gph in sorted(STANDARD_GENERATORS.items(), key=lambda x: -EBOSS_KVA.get(x[0].split(" ")[0] + " kVA", 0)):
                gen_kw = float(gen.split("/")[1].replace("kW", "").strip())
                qty = int(remaining_gen_kw // gen_kw)
                if remaining_gen_kw % gen_kw != 0:
                    qty += 1
                if qty > 0:
                    generator_rows.append((gen, qty))
                    remaining_gen_kw -= qty * gen_kw
                    if remaining_gen_kw <= 0:
                        break
            for gen, qty in generator_rows:
                st.write(f"{gen}: {qty}")

            # 2. Show generator runtime and fuel
            st.markdown("#### Generator Runtime & Fuel Analysis:")
            total_gph = sum(STANDARD_GENERATORS[gen] * qty for gen, qty in generator_rows)
            st.write(f"**Total GPH (gallons per hour):** {total_gph:.2f} gph")
            st.write(f"**Gallons per day:** {total_gph * 24:.1f} gal")
            st.write(f"**Gallons per week:** {total_gph * 24 * 7:.1f} gal")
            st.write(f"**Gallons per month (30 days):** {total_gph * 24 * 30:.1f} gal")

            # 3. Compare to using only standard generators (no EBOSS)
            st.markdown("### Standard-Only Generator System (No EBOSS):")
            std_rows = []
            std_remaining_kw = required_cont_kw
            for gen, gph in sorted(STANDARD_GENERATORS.items(), key=lambda x: -float(x[0].split("/")[1].replace("kW", "").strip())):
                gen_kw = float(gen.split("/")[1].replace("kW", "").strip())
                qty = int(std_remaining_kw // gen_kw)
                if std_remaining_kw % gen_kw != 0:
                    qty += 1
                if qty > 0:
                    std_rows.append((gen, qty))
                    std_remaining_kw -= qty * gen_kw
                    if std_remaining_kw <= 0:
                        break
            for gen, qty in std_rows:
                st.write(f"{gen}: {qty}")

            std_total_gph = sum(STANDARD_GENERATORS[gen] * qty for gen, qty in std_rows)
            st.write(f"**Total Standard Gen GPH:** {std_total_gph:.2f} gph")
            st.write(f"**Gallons per day:** {std_total_gph * 24:.1f} gal")
            st.write(f"**Gallons per week:** {std_total_gph * 24 * 7:.1f} gal")
            st.write(f"**Gallons per month (30 days):** {std_total_gph * 24 * 30:.1f} gal")

            # --- Print-friendly button with logo and title ---
            today = date.today().strftime("%B %d, %Y")
            st.markdown("""
            <style>
            @media print {
                body * { visibility: hidden; }
                .print-logo, .print-logo * { visibility: visible; }
                .form-container, .form-container * { visibility: visible; }
                .form-container {
                    position: relative;
                    background: white !important;
                    color: black !important;
                    box-shadow: none !important;
                }
                .form-container h3, th, td {
                    color: black !important;
                    text-shadow: none !important;
                }
                .cta-link.print-btn {
                    display: none;
                }
            }
            </style>
            """, unsafe_allow_html=True)
            st.markdown(f'''
            <div class="print-logo" style="text-align:center; margin-top:2rem;">
              <img src="https://raw.githubusercontent.com/TimBuffington/Eboss-tool-V2/main/assets/logo.png" width="240"><br><br>
              <div style="font-size:1.3rem; font-weight:bold;">
                EBOSS&reg Parallel Sizing and Generator Comparison Report
              </div>
              <div style="font-size:0.9rem; margin-top:0.2rem;">{today}</div>
              <div style="font-size:0.95rem; margin-top:0.8rem;">
                <b>Load Parameters:</b> {required_cont_kw} kW continuous, {required_peak_kw} kW peak
              </div>
            </div>
            ''', unsafe_allow_html=True)
            st.markdown(
                """
                <a href="javascript:window.print()" class="cta-link print-btn" style="margin: 1rem auto; display: block; text-align: center;">
                    Print Parallel Calculation
                </a>
                """,
                unsafe_allow_html=True,
            )

    st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    render_parallel_calculator_page()
